<?php
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    $url = $_POST['url'];

    // Check for SQL Injection Vulnerabilities
    function checkSQLi($url) {
        $payload = "' OR '1'='1";
        $target = $url . "?id=" . urlencode($payload);

        $response = @file_get_contents($target);
        if ($response === false) {
            return "Unable to connect to the URL for SQL Injection check.";
        }

        if (strpos($response, "syntax") || strpos($response, "SQL")) {
            return "🚨 Potential SQL Injection Vulnerability Found!";
        } else {
            return "✅ No SQL Injection Vulnerability Detected.";
        }
    }

    // Check for XSS Vulnerabilities
    function checkXSS($url) {
        $payload = "<script>alert('XSS')</script>";
        $target = $url . "?q=" . urlencode($payload);

        $response = @file_get_contents($target);
        if ($response === false) {
            return "Unable to connect to the URL for XSS check.";
        }

        if (strpos($response, htmlspecialchars($payload))) {
            return "🚨 Potential XSS Vulnerability Found!";
        } else {
            return "✅ No XSS Vulnerability Detected.";
        }
    }

    // Check HTTP Security Headers
    function checkHeaders($url) {
        $headers = @get_headers($url, 1);
        if ($headers === false) {
            return "Unable to retrieve headers for the given URL.";
        }

        $missingHeaders = [];
        if (!isset($headers['X-Frame-Options'])) {
            $missingHeaders[] = "X-Frame-Options";
        }
        if (!isset($headers['Content-Security-Policy'])) {
            $missingHeaders[] = "Content-Security-Policy";
        }
        if (!isset($headers['X-Content-Type-Options'])) {
            $missingHeaders[] = "X-Content-Type-Options";
        }

        if (empty($missingHeaders)) {
            return "✅ All Important Security Headers Are Present.";
        } else {
            return "🚨 Missing Security Headers: " . implode(", ", $missingHeaders);
        }
    }

    // Check Outdated Server Version
// Check Outdated Server Version
function checkOutdatedServer($url) {
    $headers = @get_headers($url, 1);
    if ($headers === false) {
        return "Unable to retrieve server information for the given URL.";
    }

    if (isset($headers['Server'])) {
        // Ensure $headers['Server'] is a string (could be an array if multiple Server headers)
        $serverInfo = is_array($headers['Server']) ? implode(", ", $headers['Server']) : $headers['Server'];

        if (strpos($serverInfo, "Apache/2.2") !== false) {
            return "🚨 Warning: Apache version 2.2 detected, which is outdated and insecure.";
        } else {
            return "✅ Server software appears up-to-date: $serverInfo.";
        }
    } else {
        return "No Server information found in headers.";
    }
}


    // Display Results
    echo "<h2>🔍 Security Scan Results for: $url</h2>";
    echo "<p><strong>SQL Injection Check:</strong> " . checkSQLi($url) . "</p>";
    echo "<p><strong>XSS Check:</strong> " . checkXSS($url) . "</p>";
    echo "<p><strong>Security Headers Check:</strong> " . checkHeaders($url) . "</p>";
    echo "<p><strong>Outdated Server Check:</strong> " . checkOutdatedServer($url) . "</p>";
}
?>
